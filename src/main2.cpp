/*
	DNS:
		gate1.us.dnas.playstation.org
		gate1.jp.dnas.playstation.org
		gate1.us.dnas.playstation.org
	
	https://www.ibm.com/docs/en/sdk-java-technology/8?topic=handshake-tls-12-protocol
*/

#include <iostream>
#include <cstring>

#include <openssl/ssl.h>
#include <openssl/err.h>
#include <openssl/sha.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <vector>

/*
	openssl genpkey -algorithm RSA -out server.key -pkeyopt rsa_keygen_bits:2048
	openssl req -new -key server.key -out server.csr
	openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
*/
//#define CERT_FILE "../data/server.crt"
//#define KEY_FILE "../data/server.key"

#define CERT_FILE	"../data/cert-us.pem"
#define KEY_FILE	"../data/cert-us-key.pem"
#define CHAIN_FILE	"../data/ca-cert.pem"

#define PORT 443

SSL_CTX* ctx;
SSL *ssl;
int client_sock;

std::vector<unsigned char> example_A_request = {
	0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x75, 0x73, 0x2d, 0x67, 0x77, 0x2f, 0x76, 0x32, 0x2e, 0x35,
	0x5f, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f,
	0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a,
	0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x64,
	0x66, 0x6a, 0x6b, 0x6c, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x69, 0x66, 0x0d, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x33,
	0x30, 0x38, 0x0d, 0x0a, 0x0d, 0x0a, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x00, 0x02,
	0x00, 0x05, 0xca, 0x08, 0x10, 0x76, 0x7e, 0x46, 0x1a, 0x49, 0x10, 0xa0, 0x5d, 0xdd, 0x78, 0xcc,
	0x6c, 0x07, 0x08, 0xb9, 0xbf, 0xd9, 0x6e, 0x52, 0x5f, 0x61, 0xc0, 0xd2, 0x10, 0x3b, 0x35, 0x73,
	0xea, 0xb8, 0x30, 0xaa, 0x2e, 0x55, 0x96, 0x99, 0x62, 0xc0, 0x8e, 0x3f, 0x6d, 0x3f, 0xfb, 0xb7,
	0x37, 0xd6, 0xf9, 0x1e, 0x29, 0xa5, 0x82, 0xe1, 0xb3, 0x86, 0x4f, 0x91, 0x22, 0xb5, 0x88, 0xe5,
	0x8a, 0x67, 0x16, 0xd1, 0x52, 0xcf, 0x5e, 0xea, 0xa9, 0x53, 0xc4, 0x52, 0x7b, 0x1f, 0x29, 0x0b,
	0x12, 0x6f, 0x2d, 0xa7, 0xe5, 0x18, 0x56, 0xea, 0x68, 0x14, 0x93, 0x37, 0x9c, 0x76, 0x40, 0x74,
	0x05, 0x5c, 0x77, 0xd6, 0x9a, 0xa2, 0xd4, 0x8e, 0x54, 0x54, 0xc2, 0xea, 0x43, 0x5d, 0xf8, 0xa9,
	0xd6, 0xf0, 0x72, 0x5e, 0xeb, 0xa6, 0xfd, 0xd0, 0xbc, 0x38, 0xf1, 0x6d, 0xe6, 0x56, 0x39, 0x29,
	0x1d, 0xa3, 0x0c, 0xd8, 0x41, 0x48, 0x9c, 0xda, 0x49, 0xfb, 0x50, 0xdc, 0x59, 0x95, 0xfd, 0x32,
	0x48, 0x7e, 0x16, 0x22, 0xb5, 0x40, 0xa9, 0xab, 0x75, 0x23, 0x68, 0xa9, 0xe6, 0x46, 0xcb, 0x82,
	0x01, 0x48, 0x0d, 0x96, 0x58, 0xa9, 0x23, 0x50, 0xb3, 0xad, 0xf3, 0x45, 0x43, 0xca, 0x32, 0x41,
	0x6a, 0xc1, 0x2c, 0x5c, 0xae, 0x15, 0x46, 0x4c, 0xc8, 0xb3, 0x8f, 0xb8, 0xe7, 0xee, 0x8c, 0x8d,
	0x88, 0xd3, 0xce, 0xbe, 0x25, 0xfb, 0xef, 0x77, 0x2c, 0x1f, 0xbe, 0xd9, 0xda, 0x5a, 0x5a, 0x1d,
	0x54, 0x22, 0xda, 0xfd, 0xb2, 0xbd, 0x2b, 0x07, 0x85, 0xec, 0xa7, 0x6f, 0x37, 0x3c, 0x5f, 0x3b,
	0x5d, 0x51, 0x3f, 0xf5, 0x6c, 0xa4, 0x6d, 0xda, 0x63, 0x91, 0x8d, 0x38, 0x49, 0x68, 0x76, 0xba,
	0xbf, 0xa7, 0x7e, 0x55, 0x4e, 0x74, 0x5a, 0x13, 0xc0, 0xbb, 0xe6, 0x3b, 0x63, 0xae, 0x24, 0x6f,
	0x54, 0x17, 0xb9, 0x66, 0xf1, 0xcd, 0xc9, 0x12, 0x34, 0x95

};

void process_request(const std::vector<unsigned char> request)
{
	
}

int main()
{
    // Initialize the SSL library
    SSL_library_init();
    SSL_load_error_strings();
	ERR_load_BIO_strings();
	OpenSSL_add_all_algorithms();

    // Create a new SSL context for the server
    ctx = SSL_CTX_new(SSLv23_server_method());
	
    // Load the server certificate and private key files
    if (SSL_CTX_use_certificate_file(ctx, CERT_FILE, SSL_FILETYPE_PEM) <= 0)
    {
        std::cerr << "Failed to load server certificate file" << std::endl;
        return 1;
    }

    if (SSL_CTX_use_PrivateKey_file(ctx, KEY_FILE, SSL_FILETYPE_PEM) <= 0)
    {
        std::cerr << "Failed to load server private key file" << std::endl;
        return 1;
    }
	
	// Load the CA certificate file
	if (SSL_CTX_load_verify_locations(ctx, CHAIN_FILE, nullptr) <= 0)
	{
		std::cerr << "Failed to load CA certificate file" << std::endl;
		return 1;
	}
	
    // Create a TCP socket and bind it to the specified port
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(PORT);
    bind(sockfd, (struct sockaddr *)&addr, sizeof(addr));

    // Start listening for incoming connections
    listen(sockfd, 1);
    std::cout << "Server listening on port " << PORT << std::endl;

    while (true)
    {
        // Accept a new client connection
        client_sock = accept(sockfd, NULL, NULL);
		
		std::cerr << "new client connected!" << std::endl;
		
        // Create a new SSL connection object for the client
        ssl = SSL_new(ctx);
        SSL_set_fd(ssl, client_sock);
		
        // Perform the SSL handshake
        if (SSL_accept(ssl) <= 0)
        {
            std::cerr << "SSL handshake failed" << std::endl;
            SSL_free(ssl);
            close(client_sock);
            continue;
        }
		else
		{
			std::cout << "SSL handshake accepted" << std::endl;
		}
		
        // Send a simple response to the client
        //const char *response = "Hello, client!";
        //SSL_write(ssl, response, strlen(response));
		//std::cout << "send hello" << std::endl;
		
		std::vector<unsigned char> buffer(1024, 0);
		
		// Read data from the SSL connection
		int v = SSL_read(ssl, &(buffer[0]), 1024);
		
		// Check there was data
		if (v == 0)
		{
			SSL_free(ssl);
            close(client_sock);
            continue;
		}
		
		// Resize buffer
		buffer.resize(v);
		
		// Process request
		process_request(buffer);
		
        // Shutdown the SSL connection
        SSL_shutdown(ssl);
        SSL_free(ssl);

        // Close the client socket
        close(client_sock);
    }

    // Clean up and free resources
    SSL_CTX_free(ctx);
    close(sockfd);
	
    return 0;
}

